--Jamison Wilkes SQL9


--#1 List the student ID, name and employer of the student that has enrolled the most times. Arrange the list in alphabetical 
--order of last name then first name.
SELECT e.student_id, s.last_name, s.first_name, s.employer
FROM enrollment e INNER JOIN student s ON s.student_id = e.student_id
GROUP BY e.student_id, s.first_name, s.last_name, s.employer
HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM enrollment GROUP BY student_id);


--#2 List zip code, the first and last name and phone number of instructors who teach students that live in the same zipcode as
--their instructor  (the instructor must teach them, not just live in the same zipcode, remember to look at your schema!). 
--Arrange the list by first name
SELECT i.zip, i.first_name, i.last_name, i.phone 
FROM student s INNER JOIN enrollment e ON s.student_id = e.student_id
INNER JOIN section sec ON e.section_id = sec.section_id
INNER JOIN instructor i ON i.instructor_id = sec.instructor_id
WHERE i.zip = s.zip
ORDER BY i.first_name;


--#3 (UNION)  Provide a list of student IDs with their registration date and enrollment date, include a column showing the type 
--of date: registered or enrolled. Only show students that registered in January and enrollment dates in January. The student 
--does not have to be enrolled to show in the results.
(SELECT s.student_id, TO_CHAR(registration_date, 'MM-YY') Dates, 'Registered' AS Type_of_Date 
FROM student s INNER JOIN enrollment e ON s.student_id = e.student_id
WHERE TO_CHAR(registration_date, 'MM') = 01)
UNION 
(SELECT e.student_id, TO_CHAR(enroll_date, 'MM-YY') Dates, 'Enrolled' AS Type_of_Date
FROM student s INNER JOIN enrollment e ON s.student_id = e.student_id
AND TO_CHAR(enroll_date, 'MM') = 01);




--#4 Determine the student’s name, course description, and section ID of the students who had the lowest Project (PJ) 
--grade from all courses. Arrange the list by last name, first name and then description
SELECT s.first_name, s.last_name, c.description, sec.section_id
FROM student s INNER JOIN enrollment e ON s.student_id = e.student_id
INNER JOIN section sec ON e.section_id = sec.section_id
INNER JOIN course c ON sec.course_no = c.course_no
INNER JOIN grade g ON e.student_id = g.student_id AND e.section_id = g.section_id
WHERE g.grade_type_code = 'PJ'
AND g.numeric_grade = (SELECT MIN(numeric_grade) FROM grade WHERE grade_type_code = 'PJ')
ORDER BY s.first_name;


--#5 (Decide on UNION vs. UNION ALL) Create a query that shows all of the grades for section 81 and then the Maximum of those
--grades. The individual grades should come first with the max at the bottom. List the grade type code and numeric grade. 
--The max row should have a caption of, "The max grade given for section 81 is: ".
SELECT grade_type_code, numeric_grade 
FROM grade
WHERE section_id = 81
UNION ALL
SELECT 'The max grade given for section 81 is: ', MAX(numeric_grade)
FROM grade 
WHERE section_id = 81
ORDER BY grade_type_code, numeric_grade DESC;


--#6 Create an alphabetic listing of ALL instructors and the number of sections that they have taught.
SELECT first_name, last_name, COUNT(s.section_id) sections
FROM instructor i LEFT OUTER JOIN section s ON i.instructor_id = s.instructor_id
GROUP BY first_name, last_name;


--#7 Create a query that lists location, number of sections taught in that location and number of students enrolled
--in sections at that location. Sort by location.
SELECT location, COUNT(s.section_id) sections, COUNT(e.student_id) Students
FROM section s LEFT OUTER JOIN enrollment e
ON (s.section_id = e.section_id)
GROUP BY location
ORDER BY location;


--#8 List all of the zip codes in Flushing, NYand the number of  enrolled students from each of the zip codes. 
--Sort by zip code. Show zero (0) for zip codes with no students enrolled.
SELECT s.zip, COUNT(e.student_id) Students
FROM enrollment e  FULL OUTER JOIN student s on e.student_id = s.student_id LEFT OUTER JOIN zipcode z ON s.zip = z.zip
WHERE z.city = 'Flushing'
AND z.state = 'NY'
GROUP BY s.zip
ORDER BY s.zip;


--#9 List course number and description for all of the Java courses and the total number of enrollments for each course. 
--Arrange by highest number of enrollments.
SELECT c.course_no, c.description, COUNT(s.course_no) AS "Number of Enrollments"
FROM course c
FULL JOIN section s 
ON c.course_no = s.course_no
FULL JOIN enrollment e
ON s.section_id = e.section_id
WHERE c.description LIKE '%Java%'
GROUP BY  c.course_no, c.description
ORDER BY "Number of Enrollments" DESC;


--#10 List student ID and Name of all of the students in area code 203 along with the number of enrollments each has.  
--Alphabetize the list on last name and first name.
SELECT s.student_id, s.first_name, s.last_name, (CASE WHEN COUNT(e.section_id) > 0 THEN TO_CHAR(COUNT(e.section_id)) ELSE '0' END) 
AS "Enrollments"
FROM student s
FULL JOIN enrollment e
ON s.student_id = e.student_id
WHERE s.phone LIKE '203%'
GROUP BY s.student_id, s.first_name, s.last_name
ORDER BY s.last_name, s.first_name;